generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DEVELOPMENT_DATABASE_URL")
  // directUrl = env("PRODUCTION_DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Enums
enum IssueStatus {
  OPEN
  IN_PROGRESS
  CLOSED
  REOPENED
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum ProjectRoles {
  OWNER
  ADMIN
  CONTRIBUTOR
  REPORTER
}

enum ProjectType {
  PUBLIC
  PRIVATE
}

model User {
  id               String           @id @default(cuid())
  name             String?
  email            String?          @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  reportedIssues   Issue[]          @relation("IssueCreatedBy")
  assignedIssues   Issue[]          @relation("IssueAssignedTo")
  assignedByIssues Issue[]          @relation("IssueAssignedBy")
  projects         Project[]        @relation("ProjectCreatedBy")
  projectProfiles  ProjectProfile[]
  IssueTimeline    IssueTimeline[]
}

model Project {
  id              Int              @id @default(autoincrement())
  name            String
  description     String           @db.Text
  logo            String?
  createdAt       DateTime         @default(now())
  createdBy       User             @relation("ProjectCreatedBy", fields: [createdById], references: [id])
  createdById     String
  type            ProjectType      @default(PRIVATE)
  allowSelfAssign Boolean          @default(true)
  issues          Issue[]
  projectProfiles ProjectProfile[]

  @@index([createdById])
  @@map("projects")
}

model ProjectProfile {
  id        Int          @id @default(autoincrement())
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  project   Project      @relation(fields: [projectId], references: [id])
  projectId Int
  role      ProjectRoles @default(REPORTER)

  @@unique([userId, projectId])
  @@index([projectId])
  @@index([userId])
  @@map("project_profiles")
}

model Issue {
  id            Int             @id @default(autoincrement())
  project       Project         @relation(fields: [projectId], references: [id])
  projectId     Int
  createdAt     DateTime        @default(now())
  createdBy     User            @relation("IssueCreatedBy", fields: [createdById], references: [id])
  createdById   String
  title         String          @db.VarChar(250)
  description   String          @db.Text
  status        IssueStatus     @default(OPEN)
  priority      Priority        @default(LOW)
  deadline      DateTime?
  assignedBy    User?           @relation("IssueAssignedBy", fields: [assignedById], references: [id])
  assignedById  String?
  assignedTo    User?           @relation("IssueAssignedTo", fields: [assignedToId], references: [id])
  assignedToId  String?
  IssueTimeline IssueTimeline[]

  @@index([projectId])
  @@index([createdById])
  @@index([assignedToId])
  @@index([status])
  @@index([priority])
  @@index([deadline])
  @@map("issues")
}

model IssueTimeline {
  id            Int      @id @default(autoincrement())
  issue         Issue    @relation(fields: [issueId], references: [id])
  issueId       Int
  createdAt     DateTime @default(now())
  performedBy   User?    @relation(fields: [performedById], references: [id])
  performedById String?
  description   String?
  changes       Json? // Stores { fieldName: { from: oldValue, to: newValue }, ... }

  @@index([issueId])
  @@index([performedById])
  @@map("issue_timelines")
}
