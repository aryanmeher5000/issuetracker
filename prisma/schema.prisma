generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DEVELOPMENT_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum ProjectType {
  PERSONAL
  GROUP
  ORGANIZATION
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?       @map("email_verified")
  image          String?
  accounts       Account[]
  sessions       Session[]
  assignedIssues Issue[]
  ProjectMember  ProjectMember[]

  @@map("users")
}

model ProjectMember {
  id        Int    @id @default(autoincrement())
  userId    String
  projectId Int
  role      Role

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
}

model Project {
  id      Int             @id @default(autoincrement())
  name    String
  type    ProjectType
  issues  Issue[]
  members ProjectMember[]
  tags    String[]

  @@map("projects")
}

model Issue {
  id               Int       @id @default(autoincrement())
  title            String    @db.VarChar(250)
  description      String    @db.Text
  status           Status    @default(OPEN)
  priority         Priority?
  createdAt        DateTime  @default(now())
  inProgression    DateTime?
  closedAt         DateTime?
  deadline         DateTime?
  projectId        Int
  project          Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignedToUserId String?
  assignedToUser   User?     @relation(fields: [assignedToUserId], references: [id])

  @@index([assignedToUserId])
  @@map("issues")
}
