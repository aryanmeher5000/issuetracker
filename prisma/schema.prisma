generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DEVELOPMENT_DATABASE_URL")
  // directUrl = env("PRODUCTION_DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Enums
enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum Privilege {
  USER
  ADMIN
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  issues          Issue[]
  projects        Project[]
  projectProfiles ProjectProfile[]

  @@map("users")
}

model Project {
  id          Int           @id @default(autoincrement())
  name        String
  createdAt   DateTime      @default(now())
  createdBy   User          @relation(fields: [createdById], references: [id])
  createdById String
  status      ProjectStatus @default(ACTIVE)
  adminOnly   Boolean       @default(false)
  issues      Issue[]
  roles       String[]

  @@map("projects")
}

model ProjectProfile {
  id             Int             @id @default(autoincrement())
  user           User            @relation(fields: [userId], references: [id])
  userId         String
  role           String
  privilege      Privilege       @default(USER)
  assignedIssues AssignedIssue[]

  @@map("project_profiles")
}

model Issue {
  id             Int             @id @default(autoincrement())
  relatedProject Project         @relation(fields: [projectId], references: [id])
  projectId      Int
  createdAt      DateTime        @default(now())
  inProgression  DateTime?
  closedAt       DateTime?
  createdBy      User            @relation(fields: [createdById], references: [id])
  createdById    String
  title          String          @db.VarChar(250)
  description    String          @db.Text
  status         IssueStatus     @default(OPEN)
  priority       Priority        @default(MEDIUM)
  deadline       DateTime?
  assignedIssues AssignedIssue[]

  @@map("issues")
}

model AssignedIssue {
  id           Int            @id @default(autoincrement())
  relatedIssue Issue          @relation(fields: [issueId], references: [id])
  issueId      Int
  assignedTo   ProjectProfile @relation(fields: [profileId], references: [id])
  profileId    Int

  @@map("assigned_issues")
}
